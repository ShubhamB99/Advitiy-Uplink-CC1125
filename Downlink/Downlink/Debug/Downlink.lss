
Downlink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000071c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  00802000  0000071c  000007b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000015a  00802078  00802078  00000828  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000858  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005144  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000035b9  00000000  00000000  00005b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000121f  00000000  00000000  000090c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  0000a2e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002f1b  00000000  00000000  0000a61c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001856  00000000  00000000  0000d537  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  0000ed8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  68:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	ec e1       	ldi	r30, 0x1C	; 28
 214:	f7 e0       	ldi	r31, 0x07	; 7
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a8 37       	cpi	r26, 0x78	; 120
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	21 e2       	ldi	r18, 0x21	; 33
 228:	a8 e7       	ldi	r26, 0x78	; 120
 22a:	b0 e2       	ldi	r27, 0x20	; 32
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	a2 3d       	cpi	r26, 0xD2	; 210
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	0e 94 37 03 	call	0x66e	; 0x66e <main>
 23a:	0c 94 8c 03 	jmp	0x718	; 0x718 <_exit>

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <crc16>:
		
		if(Tobuffer){
			i++;
		}
	}
}
 242:	7f ef       	ldi	r23, 0xFF	; 255
 244:	76 0f       	add	r23, r22
 246:	66 23       	and	r22, r22
 248:	29 f1       	breq	.+74     	; 0x294 <crc16+0x52>
 24a:	e8 2f       	mov	r30, r24
 24c:	f9 2f       	mov	r31, r25
 24e:	4f ef       	ldi	r20, 0xFF	; 255
 250:	5f ef       	ldi	r21, 0xFF	; 255
 252:	21 91       	ld	r18, Z+
 254:	25 27       	eor	r18, r21
 256:	32 2f       	mov	r19, r18
 258:	32 95       	swap	r19
 25a:	3f 70       	andi	r19, 0x0F	; 15
 25c:	92 2f       	mov	r25, r18
 25e:	93 27       	eor	r25, r19
 260:	29 2f       	mov	r18, r25
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	54 2f       	mov	r21, r20
 266:	44 27       	eor	r20, r20
 268:	42 27       	eor	r20, r18
 26a:	53 27       	eor	r21, r19
 26c:	c9 01       	movw	r24, r18
 26e:	98 2f       	mov	r25, r24
 270:	88 27       	eor	r24, r24
 272:	92 95       	swap	r25
 274:	90 7f       	andi	r25, 0xF0	; 240
 276:	48 27       	eor	r20, r24
 278:	59 27       	eor	r21, r25
 27a:	22 0f       	add	r18, r18
 27c:	33 1f       	adc	r19, r19
 27e:	22 95       	swap	r18
 280:	32 95       	swap	r19
 282:	30 7f       	andi	r19, 0xF0	; 240
 284:	32 27       	eor	r19, r18
 286:	20 7f       	andi	r18, 0xF0	; 240
 288:	32 27       	eor	r19, r18
 28a:	42 27       	eor	r20, r18
 28c:	53 27       	eor	r21, r19
 28e:	71 50       	subi	r23, 0x01	; 1
 290:	00 f7       	brcc	.-64     	; 0x252 <crc16+0x10>
 292:	02 c0       	rjmp	.+4      	; 0x298 <crc16+0x56>
 294:	4f ef       	ldi	r20, 0xFF	; 255
 296:	5f ef       	ldi	r21, 0xFF	; 255
 298:	ca 01       	movw	r24, r20
 29a:	08 95       	ret

0000029c <make_ax25_frame_from_data>:
 29c:	cf 92       	push	r12
 29e:	df 92       	push	r13
 2a0:	ef 92       	push	r14
 2a2:	ff 92       	push	r15
 2a4:	0f 93       	push	r16
 2a6:	1f 93       	push	r17
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
 2b0:	c0 55       	subi	r28, 0x50	; 80
 2b2:	d1 09       	sbc	r29, r1
 2b4:	cd bf       	out	0x3d, r28	; 61
 2b6:	de bf       	out	0x3e, r29	; 62
 2b8:	6c 01       	movw	r12, r24
 2ba:	8e e7       	ldi	r24, 0x7E	; 126
 2bc:	d6 01       	movw	r26, r12
 2be:	8d 93       	st	X+, r24
 2c0:	7d 01       	movw	r14, r26
 2c2:	86 e0       	ldi	r24, 0x06	; 6
 2c4:	ef e3       	ldi	r30, 0x3F	; 63
 2c6:	f0 e2       	ldi	r31, 0x20	; 32
 2c8:	de 01       	movw	r26, r28
 2ca:	11 96       	adiw	r26, 0x01	; 1
 2cc:	01 90       	ld	r0, Z+
 2ce:	0d 92       	st	X+, r0
 2d0:	8a 95       	dec	r24
 2d2:	e1 f7       	brne	.-8      	; 0x2cc <make_ax25_frame_from_data+0x30>
 2d4:	ce 01       	movw	r24, r28
 2d6:	01 96       	adiw	r24, 0x01	; 1
 2d8:	d7 01       	movw	r26, r14
 2da:	9e 01       	movw	r18, r28
 2dc:	29 5f       	subi	r18, 0xF9	; 249
 2de:	3f 4f       	sbci	r19, 0xFF	; 255
 2e0:	fc 01       	movw	r30, r24
 2e2:	41 91       	ld	r20, Z+
 2e4:	4d 93       	st	X+, r20
 2e6:	e2 17       	cp	r30, r18
 2e8:	f3 07       	cpc	r31, r19
 2ea:	d9 f7       	brne	.-10     	; 0x2e2 <make_ax25_frame_from_data+0x46>
 2ec:	40 e6       	ldi	r20, 0x60	; 96
 2ee:	f6 01       	movw	r30, r12
 2f0:	47 83       	std	Z+7, r20	; 0x07
 2f2:	46 e0       	ldi	r20, 0x06	; 6
 2f4:	e6 e4       	ldi	r30, 0x46	; 70
 2f6:	f0 e2       	ldi	r31, 0x20	; 32
 2f8:	de 01       	movw	r26, r28
 2fa:	11 96       	adiw	r26, 0x01	; 1
 2fc:	01 90       	ld	r0, Z+
 2fe:	0d 92       	st	X+, r0
 300:	4a 95       	dec	r20
 302:	e1 f7       	brne	.-8      	; 0x2fc <make_ax25_frame_from_data+0x60>
 304:	d6 01       	movw	r26, r12
 306:	18 96       	adiw	r26, 0x08	; 8
 308:	fc 01       	movw	r30, r24
 30a:	41 91       	ld	r20, Z+
 30c:	4d 93       	st	X+, r20
 30e:	e2 17       	cp	r30, r18
 310:	f3 07       	cpc	r31, r19
 312:	d9 f7       	brne	.-10     	; 0x30a <make_ax25_frame_from_data+0x6e>
 314:	48 e6       	ldi	r20, 0x68	; 104
 316:	d6 01       	movw	r26, r12
 318:	1e 96       	adiw	r26, 0x0e	; 14
 31a:	4c 93       	st	X, r20
 31c:	46 e0       	ldi	r20, 0x06	; 6
 31e:	ed e4       	ldi	r30, 0x4D	; 77
 320:	f0 e2       	ldi	r31, 0x20	; 32
 322:	de 01       	movw	r26, r28
 324:	11 96       	adiw	r26, 0x01	; 1
 326:	01 90       	ld	r0, Z+
 328:	0d 92       	st	X+, r0
 32a:	4a 95       	dec	r20
 32c:	e1 f7       	brne	.-8      	; 0x326 <make_ax25_frame_from_data+0x8a>
 32e:	f6 01       	movw	r30, r12
 330:	3f 96       	adiw	r30, 0x0f	; 15
 332:	dc 01       	movw	r26, r24
 334:	4d 91       	ld	r20, X+
 336:	cd 01       	movw	r24, r26
 338:	41 93       	st	Z+, r20
 33a:	a2 17       	cp	r26, r18
 33c:	b3 07       	cpc	r27, r19
 33e:	c9 f7       	brne	.-14     	; 0x332 <make_ax25_frame_from_data+0x96>
 340:	81 e6       	ldi	r24, 0x61	; 97
 342:	f6 01       	movw	r30, r12
 344:	85 8b       	std	Z+21, r24	; 0x15
 346:	83 e0       	ldi	r24, 0x03	; 3
 348:	86 8b       	std	Z+22, r24	; 0x16
 34a:	80 ef       	ldi	r24, 0xF0	; 240
 34c:	87 8b       	std	Z+23, r24	; 0x17
 34e:	00 91 3d 20 	lds	r16, 0x203D	; 0x80203d <Data_Length>
 352:	10 91 3e 20 	lds	r17, 0x203E	; 0x80203e <Data_Length+0x1>
 356:	a8 01       	movw	r20, r16
 358:	ce 01       	movw	r24, r28
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	0e 94 83 03 	call	0x706	; 0x706 <memcpy>
 360:	10 16       	cp	r1, r16
 362:	11 06       	cpc	r1, r17
 364:	c4 f4       	brge	.+48     	; 0x396 <make_ax25_frame_from_data+0xfa>
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	20 e0       	ldi	r18, 0x00	; 0
 36c:	f6 01       	movw	r30, r12
 36e:	e8 0f       	add	r30, r24
 370:	f9 1f       	adc	r31, r25
 372:	a1 e0       	ldi	r26, 0x01	; 1
 374:	b0 e0       	ldi	r27, 0x00	; 0
 376:	ac 0f       	add	r26, r28
 378:	bd 1f       	adc	r27, r29
 37a:	a8 0f       	add	r26, r24
 37c:	b9 1f       	adc	r27, r25
 37e:	8c 91       	ld	r24, X
 380:	80 8f       	std	Z+24, r24	; 0x18
 382:	2f 5f       	subi	r18, 0xFF	; 255
 384:	82 2f       	mov	r24, r18
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	00 91 3d 20 	lds	r16, 0x203D	; 0x80203d <Data_Length>
 38c:	10 91 3e 20 	lds	r17, 0x203E	; 0x80203e <Data_Length+0x1>
 390:	80 17       	cp	r24, r16
 392:	91 07       	cpc	r25, r17
 394:	5c f3       	brlt	.-42     	; 0x36c <make_ax25_frame_from_data+0xd0>
 396:	18 e1       	ldi	r17, 0x18	; 24
 398:	10 0f       	add	r17, r16
 39a:	67 e1       	ldi	r22, 0x17	; 23
 39c:	60 0f       	add	r22, r16
 39e:	c7 01       	movw	r24, r14
 3a0:	0e 94 21 01 	call	0x242	; 0x242 <crc16>
 3a4:	f6 01       	movw	r30, r12
 3a6:	e1 0f       	add	r30, r17
 3a8:	f1 1d       	adc	r31, r1
 3aa:	80 83       	st	Z, r24
 3ac:	91 83       	std	Z+1, r25	; 0x01
 3ae:	06 5e       	subi	r16, 0xE6	; 230
 3b0:	f6 01       	movw	r30, r12
 3b2:	e0 0f       	add	r30, r16
 3b4:	f1 1d       	adc	r31, r1
 3b6:	8e e7       	ldi	r24, 0x7E	; 126
 3b8:	80 83       	st	Z, r24
 3ba:	c0 5b       	subi	r28, 0xB0	; 176
 3bc:	df 4f       	sbci	r29, 0xFF	; 255
 3be:	cd bf       	out	0x3d, r28	; 61
 3c0:	de bf       	out	0x3e, r29	; 62
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	1f 91       	pop	r17
 3c8:	0f 91       	pop	r16
 3ca:	ff 90       	pop	r15
 3cc:	ef 90       	pop	r14
 3ce:	df 90       	pop	r13
 3d0:	cf 90       	pop	r12
 3d2:	08 95       	ret

000003d4 <SPI_Master_Init>:
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
 3d8:	e0 e8       	ldi	r30, 0x80	; 128
 3da:	f6 e0       	ldi	r31, 0x06	; 6
 3dc:	20 e1       	ldi	r18, 0x10	; 16
 3de:	21 83       	std	Z+1, r18	; 0x01
 3e0:	80 e2       	ldi	r24, 0x20	; 32
 3e2:	81 83       	std	Z+1, r24	; 0x01
 3e4:	90 e8       	ldi	r25, 0x80	; 128
 3e6:	91 83       	std	Z+1, r25	; 0x01
 3e8:	38 e3       	ldi	r19, 0x38	; 56
 3ea:	34 8b       	std	Z+20, r19	; 0x14
 3ec:	25 83       	std	Z+5, r18	; 0x05
 3ee:	ae e3       	ldi	r26, 0x3E	; 62
 3f0:	b1 e2       	ldi	r27, 0x21	; 33
 3f2:	c0 ec       	ldi	r28, 0xC0	; 192
 3f4:	d8 e0       	ldi	r29, 0x08	; 8
 3f6:	cd 93       	st	X+, r28
 3f8:	dc 93       	st	X, r29
 3fa:	11 97       	sbiw	r26, 0x01	; 1
 3fc:	12 96       	adiw	r26, 0x02	; 2
 3fe:	ed 93       	st	X+, r30
 400:	fc 93       	st	X, r31
 402:	13 97       	sbiw	r26, 0x03	; 3
 404:	14 96       	adiw	r26, 0x04	; 4
 406:	1c 92       	st	X, r1
 408:	14 97       	sbiw	r26, 0x04	; 4
 40a:	28 ed       	ldi	r18, 0xD8	; 216
 40c:	28 83       	st	Y, r18
 40e:	cd 91       	ld	r28, X+
 410:	dc 91       	ld	r29, X
 412:	11 97       	sbiw	r26, 0x01	; 1
 414:	19 82       	std	Y+1, r1	; 0x01
 416:	15 96       	adiw	r26, 0x05	; 5
 418:	1d 92       	st	X+, r1
 41a:	1c 92       	st	X, r1
 41c:	16 97       	sbiw	r26, 0x06	; 6
 41e:	12 96       	adiw	r26, 0x02	; 2
 420:	0d 90       	ld	r0, X+
 422:	bc 91       	ld	r27, X
 424:	a0 2d       	mov	r26, r0
 426:	20 ea       	ldi	r18, 0xA0	; 160
 428:	11 96       	adiw	r26, 0x01	; 1
 42a:	2c 93       	st	X, r18
 42c:	95 83       	std	Z+5, r25	; 0x05
 42e:	86 83       	std	Z+6, r24	; 0x06
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	08 95       	ret

00000436 <ccxxx0_Write>:
 436:	90 e1       	ldi	r25, 0x10	; 16
 438:	90 93 86 06 	sts	0x0686, r25	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
 43c:	e0 e8       	ldi	r30, 0x80	; 128
 43e:	f6 e0       	ldi	r31, 0x06	; 6
 440:	90 85       	ldd	r25, Z+8	; 0x08
 442:	96 fd       	sbrc	r25, 6
 444:	fd cf       	rjmp	.-6      	; 0x440 <ccxxx0_Write+0xa>
 446:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 44a:	e2 ec       	ldi	r30, 0xC2	; 194
 44c:	f8 e0       	ldi	r31, 0x08	; 8
 44e:	80 81       	ld	r24, Z
 450:	88 23       	and	r24, r24
 452:	ec f7       	brge	.-6      	; 0x44e <ccxxx0_Write+0x18>
 454:	e3 ec       	ldi	r30, 0xC3	; 195
 456:	f8 e0       	ldi	r31, 0x08	; 8
 458:	80 81       	ld	r24, Z
 45a:	60 83       	st	Z, r22
 45c:	e2 ec       	ldi	r30, 0xC2	; 194
 45e:	f8 e0       	ldi	r31, 0x08	; 8
 460:	80 81       	ld	r24, Z
 462:	88 23       	and	r24, r24
 464:	ec f7       	brge	.-6      	; 0x460 <ccxxx0_Write+0x2a>
 466:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 46a:	90 e1       	ldi	r25, 0x10	; 16
 46c:	90 93 85 06 	sts	0x0685, r25	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
 470:	08 95       	ret

00000472 <ccxxx0_Strobe>:
 472:	90 e1       	ldi	r25, 0x10	; 16
 474:	90 93 86 06 	sts	0x0686, r25	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
 478:	e0 e8       	ldi	r30, 0x80	; 128
 47a:	f6 e0       	ldi	r31, 0x06	; 6
 47c:	90 85       	ldd	r25, Z+8	; 0x08
 47e:	96 fd       	sbrc	r25, 6
 480:	fd cf       	rjmp	.-6      	; 0x47c <ccxxx0_Strobe+0xa>
 482:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 486:	e2 ec       	ldi	r30, 0xC2	; 194
 488:	f8 e0       	ldi	r31, 0x08	; 8
 48a:	80 81       	ld	r24, Z
 48c:	88 23       	and	r24, r24
 48e:	ec f7       	brge	.-6      	; 0x48a <ccxxx0_Strobe+0x18>
 490:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 494:	90 e1       	ldi	r25, 0x10	; 16
 496:	90 93 85 06 	sts	0x0685, r25	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
 49a:	08 95       	ret

0000049c <ccxxx0_WriteBurst>:
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	90 e1       	ldi	r25, 0x10	; 16
 4a2:	90 93 86 06 	sts	0x0686, r25	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
 4a6:	e0 e8       	ldi	r30, 0x80	; 128
 4a8:	f6 e0       	ldi	r31, 0x06	; 6
 4aa:	90 85       	ldd	r25, Z+8	; 0x08
 4ac:	96 fd       	sbrc	r25, 6
 4ae:	fd cf       	rjmp	.-6      	; 0x4aa <ccxxx0_WriteBurst+0xe>
 4b0:	80 64       	ori	r24, 0x40	; 64
 4b2:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 4b6:	e2 ec       	ldi	r30, 0xC2	; 194
 4b8:	f8 e0       	ldi	r31, 0x08	; 8
 4ba:	80 81       	ld	r24, Z
 4bc:	88 23       	and	r24, r24
 4be:	ec f7       	brge	.-6      	; 0x4ba <ccxxx0_WriteBurst+0x1e>
 4c0:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 4c4:	41 15       	cp	r20, r1
 4c6:	51 05       	cpc	r21, r1
 4c8:	79 f0       	breq	.+30     	; 0x4e8 <ccxxx0_WriteBurst+0x4c>
 4ca:	db 01       	movw	r26, r22
 4cc:	46 0f       	add	r20, r22
 4ce:	57 1f       	adc	r21, r23
 4d0:	c3 ec       	ldi	r28, 0xC3	; 195
 4d2:	d8 e0       	ldi	r29, 0x08	; 8
 4d4:	e2 ec       	ldi	r30, 0xC2	; 194
 4d6:	f8 e0       	ldi	r31, 0x08	; 8
 4d8:	8d 91       	ld	r24, X+
 4da:	88 83       	st	Y, r24
 4dc:	80 81       	ld	r24, Z
 4de:	88 23       	and	r24, r24
 4e0:	ec f7       	brge	.-6      	; 0x4dc <ccxxx0_WriteBurst+0x40>
 4e2:	a4 17       	cp	r26, r20
 4e4:	b5 07       	cpc	r27, r21
 4e6:	c1 f7       	brne	.-16     	; 0x4d8 <ccxxx0_WriteBurst+0x3c>
 4e8:	80 e1       	ldi	r24, 0x10	; 16
 4ea:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	08 95       	ret

000004f4 <ccxxx0_PowerOnReset>:
 4f4:	e0 e8       	ldi	r30, 0x80	; 128
 4f6:	f6 e0       	ldi	r31, 0x06	; 6
 4f8:	80 e1       	ldi	r24, 0x10	; 16
 4fa:	85 83       	std	Z+5, r24	; 0x05
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <ccxxx0_PowerOnReset+0xa>
 4fe:	86 83       	std	Z+6, r24	; 0x06
 500:	00 c0       	rjmp	.+0      	; 0x502 <ccxxx0_PowerOnReset+0xe>
 502:	85 83       	std	Z+5, r24	; 0x05
 504:	9b e1       	ldi	r25, 0x1B	; 27
 506:	9a 95       	dec	r25
 508:	f1 f7       	brne	.-4      	; 0x506 <ccxxx0_PowerOnReset+0x12>
 50a:	00 00       	nop
 50c:	86 83       	std	Z+6, r24	; 0x06
 50e:	80 85       	ldd	r24, Z+8	; 0x08
 510:	86 fd       	sbrc	r24, 6
 512:	fd cf       	rjmp	.-6      	; 0x50e <ccxxx0_PowerOnReset+0x1a>
 514:	81 e2       	ldi	r24, 0x21	; 33
 516:	8a 95       	dec	r24
 518:	f1 f7       	brne	.-4      	; 0x516 <ccxxx0_PowerOnReset+0x22>
 51a:	00 00       	nop
 51c:	80 e3       	ldi	r24, 0x30	; 48
 51e:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 522:	e2 ec       	ldi	r30, 0xC2	; 194
 524:	f8 e0       	ldi	r31, 0x08	; 8
 526:	80 81       	ld	r24, Z
 528:	88 23       	and	r24, r24
 52a:	ec f7       	brge	.-6      	; 0x526 <ccxxx0_PowerOnReset+0x32>
 52c:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 530:	e0 e8       	ldi	r30, 0x80	; 128
 532:	f6 e0       	ldi	r31, 0x06	; 6
 534:	80 85       	ldd	r24, Z+8	; 0x08
 536:	86 fd       	sbrc	r24, 6
 538:	fd cf       	rjmp	.-6      	; 0x534 <ccxxx0_PowerOnReset+0x40>
 53a:	91 e2       	ldi	r25, 0x21	; 33
 53c:	9a 95       	dec	r25
 53e:	f1 f7       	brne	.-4      	; 0x53c <ccxxx0_PowerOnReset+0x48>
 540:	00 00       	nop
 542:	80 e1       	ldi	r24, 0x10	; 16
 544:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
 548:	08 95       	ret

0000054a <ccxxx0_Setup>:
{
	unsigned char read;
	// Write register settings
	
	//writeByte = 0x08;
	ccxxx0_Write(CC112X_IOCFG3, 0x08);
 54a:	68 e0       	ldi	r22, 0x08	; 8
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	0e 94 1b 02 	call	0x436	; 0x436 <ccxxx0_Write>
	//writeByte = 0x09;
	ccxxx0_Write(CC112X_IOCFG2, 0x09);
 552:	69 e0       	ldi	r22, 0x09	; 9
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	0e 94 1b 02 	call	0x436	; 0x436 <ccxxx0_Write>
	//writeByte = 0x30;
	ccxxx0_Write(CC112X_IOCFG0, 0x30);
 55a:	60 e3       	ldi	r22, 0x30	; 48
 55c:	83 e0       	ldi	r24, 0x03	; 3
 55e:	0e 94 1b 02 	call	0x436	; 0x436 <ccxxx0_Write>
	//writeByte = 0x08;
	ccxxx0_Write(CC112X_SYNC_CFG1, 0x08);
 562:	68 e0       	ldi	r22, 0x08	; 8
 564:	88 e0       	ldi	r24, 0x08	; 8
 566:	0e 94 1b 02 	call	0x436	; 0x436 <ccxxx0_Write>
	//writeByte = 0x00;
	ccxxx0_Write(CC112X_PREAMBLE_CFG1, 0x00);
 56a:	60 e0       	ldi	r22, 0x00	; 0
 56c:	8d e0       	ldi	r24, 0x0D	; 13
 56e:	0e 94 1b 02 	call	0x436	; 0x436 <ccxxx0_Write>
	//writeByte = 0x06;
	ccxxx0_Write(CC112X_MDMCFG1, 0x06);
 572:	66 e0       	ldi	r22, 0x06	; 6
 574:	82 e1       	ldi	r24, 0x12	; 18
 576:	0e 94 1b 02 	call	0x436	; 0x436 <ccxxx0_Write>
	//writeByte = 0x0A;
	ccxxx0_Write(CC112X_MDMCFG0, 0x0A);
 57a:	6a e0       	ldi	r22, 0x0A	; 10
 57c:	83 e1       	ldi	r24, 0x13	; 19
 57e:	0e 94 1b 02 	call	0x436	; 0x436 <ccxxx0_Write>
	//writeByte = 0xA9;
	ccxxx0_Write(CC112X_AGC_CFG1, 0xA9);
 582:	69 ea       	ldi	r22, 0xA9	; 169
 584:	8c e1       	ldi	r24, 0x1C	; 28
 586:	0e 94 1b 02 	call	0x436	; 0x436 <ccxxx0_Write>
	//writeByte = 0x05;
	ccxxx0_Write(CC112X_PKT_CFG2, 0x05);
 58a:	65 e0       	ldi	r22, 0x05	; 5
 58c:	86 e2       	ldi	r24, 0x26	; 38
 58e:	0e 94 1b 02 	call	0x436	; 0x436 <ccxxx0_Write>
	//writeByte = 0x00;
	ccxxx0_Write(CC112X_PKT_CFG1, 0x00);
 592:	60 e0       	ldi	r22, 0x00	; 0
 594:	87 e2       	ldi	r24, 0x27	; 39
 596:	0e 94 1b 02 	call	0x436	; 0x436 <ccxxx0_Write>
	//writeByte = 0x08;
	ccxxx0_Write(CC112X_SERIAL_STATUS, 0x08);
 59a:	68 e0       	ldi	r22, 0x08	; 8
 59c:	81 e9       	ldi	r24, 0x91	; 145
 59e:	0e 94 1b 02 	call	0x436	; 0x436 <ccxxx0_Write>
	ccxxx0_Write(CC112X_MODCFG_DEV_E, 0x29);
 5a2:	69 e2       	ldi	r22, 0x29	; 41
 5a4:	8b e0       	ldi	r24, 0x0B	; 11
 5a6:	0e 94 1b 02 	call	0x436	; 0x436 <ccxxx0_Write>
	ccxxx0_Write(CC112X_FREQ_IF_CFG, 0x50);
 5aa:	60 e5       	ldi	r22, 0x50	; 80
 5ac:	8f e0       	ldi	r24, 0x0F	; 15
 5ae:	0e 94 1b 02 	call	0x436	; 0x436 <ccxxx0_Write>
	ccxxx0_Write(CC112X_SYMBOL_RATE2, 0x48);
 5b2:	68 e4       	ldi	r22, 0x48	; 72
 5b4:	84 e1       	ldi	r24, 0x14	; 20
 5b6:	0e 94 1b 02 	call	0x436	; 0x436 <ccxxx0_Write>
	ccxxx0_Write(CC112X_SYMBOL_RATE1, 0x93);
 5ba:	63 e9       	ldi	r22, 0x93	; 147
 5bc:	85 e1       	ldi	r24, 0x15	; 21
 5be:	0e 94 1b 02 	call	0x436	; 0x436 <ccxxx0_Write>
	ccxxx0_Write(CC112X_SYMBOL_RATE0, 0x75);
 5c2:	65 e7       	ldi	r22, 0x75	; 117
 5c4:	86 e1       	ldi	r24, 0x16	; 22
 5c6:	0e 94 1b 02 	call	0x436	; 0x436 <ccxxx0_Write>
	ccxxx0_Write(CC112X_FS_CFG, 0x7E);
 5ca:	6e e7       	ldi	r22, 0x7E	; 126
 5cc:	81 e2       	ldi	r24, 0x21	; 33
 5ce:	0e 94 1b 02 	call	0x436	; 0x436 <ccxxx0_Write>
	ccxxx0_Write(CC112X_PA_CFG0, 0x7E);
 5d2:	6e e7       	ldi	r22, 0x7E	; 126
 5d4:	8d e2       	ldi	r24, 0x2D	; 45
 5d6:	0e 94 1b 02 	call	0x436	; 0x436 <ccxxx0_Write>
	ccxxx0_Write(CC112X_FREQ2, 0x6D);
 5da:	6d e6       	ldi	r22, 0x6D	; 109
 5dc:	8c e0       	ldi	r24, 0x0C	; 12
 5de:	0e 94 1b 02 	call	0x436	; 0x436 <ccxxx0_Write>
	ccxxx0_Write(CC112X_FREQ1, 0x7D);
 5e2:	6d e7       	ldi	r22, 0x7D	; 125
 5e4:	8d e0       	ldi	r24, 0x0D	; 13
 5e6:	0e 94 1b 02 	call	0x436	; 0x436 <ccxxx0_Write>
	ccxxx0_Write(CC112X_FREQ0, 0x81);
 5ea:	61 e8       	ldi	r22, 0x81	; 129
 5ec:	8e e0       	ldi	r24, 0x0E	; 14
 5ee:	0e 94 1b 02 	call	0x436	; 0x436 <ccxxx0_Write>
 5f2:	08 95       	ret

000005f4 <CC_Transmit>:
}


void CC_Transmit(unsigned int pkt_length)
{
	PORTE.OUT = 0xff;
 5f4:	8f ef       	ldi	r24, 0xFF	; 255
 5f6:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
 5fa:	e0 e0       	ldi	r30, 0x00	; 0
 5fc:	f0 e2       	ldi	r31, 0x20	; 32
 5fe:	a5 e9       	ldi	r26, 0x95	; 149
 600:	b1 e2       	ldi	r27, 0x21	; 33
 602:	2d e3       	ldi	r18, 0x3D	; 61
 604:	30 e2       	ldi	r19, 0x20	; 32
	char temp[61];

	//strcpy((char*)data_transmit, (const char*)address);
	for (int i = 0; i<61; i++)
	{
		data_transmit[i] =  address[i];
 606:	81 91       	ld	r24, Z+
 608:	8d 93       	st	X+, r24
{
	PORTE.OUT = 0xff;
	char temp[61];

	//strcpy((char*)data_transmit, (const char*)address);
	for (int i = 0; i<61; i++)
 60a:	e2 17       	cp	r30, r18
 60c:	f3 07       	cpc	r31, r19
 60e:	d9 f7       	brne	.-10     	; 0x606 <CC_Transmit+0x12>
	{
		data_transmit[i] =  address[i];
	}

	ccxxx0_Strobe(CC112X_SIDLE);//Exit RX / TX, turn off frequency synthesizer and exit Wake-On-Radio mode if applicable
 610:	86 e3       	ldi	r24, 0x36	; 54
 612:	0e 94 39 02 	call	0x472	; 0x472 <ccxxx0_Strobe>
	//ccxxx0_WriteBurst(CCxxx0_PATABLE, &paTable[0], 1); // max power
	ccxxx0_Strobe(CC112X_SFTX); // flush tx buff
 616:	8b e3       	ldi	r24, 0x3B	; 59
 618:	0e 94 39 02 	call	0x472	; 0x472 <ccxxx0_Strobe>

	ccxxx0_Strobe(CC112X_SFTX); // goto tx mode
 61c:	8b e3       	ldi	r24, 0x3B	; 59
 61e:	0e 94 39 02 	call	0x472	; 0x472 <ccxxx0_Strobe>
	ccxxx0_WriteBurst(CC112X_BURST_TXFIFO, (unsigned char*)data_transmit,61); // addr=M, payload=4 bytes, Total PKTLEN=5//see cc1101 datasheet pg no.-40
 622:	4d e3       	ldi	r20, 0x3D	; 61
 624:	50 e0       	ldi	r21, 0x00	; 0
 626:	65 e9       	ldi	r22, 0x95	; 149
 628:	71 e2       	ldi	r23, 0x21	; 33
 62a:	8f e7       	ldi	r24, 0x7F	; 127
 62c:	0e 94 4e 02 	call	0x49c	; 0x49c <ccxxx0_WriteBurst>
	//ccxxx0_ReadBurst(CCxxx0_TXFIFO, (unsigned char*)data_transmit,35);
	if(data_transmit[60]==0x7E){PORTE.OUT = 0xAA;};
 630:	80 91 d1 21 	lds	r24, 0x21D1	; 0x8021d1 <data_transmit+0x3c>
 634:	8e 37       	cpi	r24, 0x7E	; 126
 636:	19 f4       	brne	.+6      	; 0x63e <CC_Transmit+0x4a>
 638:	8a ea       	ldi	r24, 0xAA	; 170
 63a:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 63e:	83 ec       	ldi	r24, 0xC3	; 195
 640:	99 e0       	ldi	r25, 0x09	; 9
 642:	01 97       	sbiw	r24, 0x01	; 1
 644:	f1 f7       	brne	.-4      	; 0x642 <CC_Transmit+0x4e>
 646:	00 c0       	rjmp	.+0      	; 0x648 <CC_Transmit+0x54>
 648:	00 00       	nop
 64a:	8b e7       	ldi	r24, 0x7B	; 123
 64c:	92 e9       	ldi	r25, 0x92	; 146
 64e:	01 97       	sbiw	r24, 0x01	; 1
 650:	f1 f7       	brne	.-4      	; 0x64e <CC_Transmit+0x5a>
 652:	00 c0       	rjmp	.+0      	; 0x654 <CC_Transmit+0x60>
 654:	00 00       	nop
	_delay_ms(5);
	//ccxxx0_Strobe(CCxxx0_STX); // goto tx mode
	_delay_ms(75);// initially 120ms

	ccxxx0_Strobe(CC112X_SIDLE);
 656:	86 e3       	ldi	r24, 0x36	; 54
 658:	0e 94 39 02 	call	0x472	; 0x472 <ccxxx0_Strobe>
 65c:	87 e8       	ldi	r24, 0x87	; 135
 65e:	93 e1       	ldi	r25, 0x13	; 19
 660:	01 97       	sbiw	r24, 0x01	; 1
 662:	f1 f7       	brne	.-4      	; 0x660 <CC_Transmit+0x6c>
 664:	00 c0       	rjmp	.+0      	; 0x666 <CC_Transmit+0x72>
 666:	00 00       	nop
	_delay_ms(10);
	PORTE.OUT = 0x00;
 668:	10 92 84 06 	sts	0x0684, r1	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
 66c:	08 95       	ret

0000066e <main>:

/*****
	MAIN program
*****/
int main(void)
{
 66e:	cf 93       	push	r28
 670:	df 93       	push	r29
 672:	cd b7       	in	r28, 0x3d	; 61
 674:	de b7       	in	r29, 0x3e	; 62
 676:	c2 57       	subi	r28, 0x72	; 114
 678:	d1 09       	sbc	r29, r1
 67a:	cd bf       	out	0x3d, r28	; 61
 67c:	de bf       	out	0x3e, r29	; 62
	cli(); 							//Clears the global interrupts
 67e:	f8 94       	cli
	SPI_Master_Init();
 680:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <SPI_Master_Init>
	//sei();

	PORTE.DIR = 0b00001111;
 684:	e0 e8       	ldi	r30, 0x80	; 128
 686:	f6 e0       	ldi	r31, 0x06	; 6
 688:	8f e0       	ldi	r24, 0x0F	; 15
 68a:	80 83       	st	Z, r24
	PORTE.OUT = 0xFF;
 68c:	8f ef       	ldi	r24, 0xFF	; 255
 68e:	84 83       	std	Z+4, r24	; 0x04
 690:	2f e7       	ldi	r18, 0x7F	; 127
 692:	8a e1       	ldi	r24, 0x1A	; 26
 694:	96 e0       	ldi	r25, 0x06	; 6
 696:	21 50       	subi	r18, 0x01	; 1
 698:	80 40       	sbci	r24, 0x00	; 0
 69a:	90 40       	sbci	r25, 0x00	; 0
 69c:	e1 f7       	brne	.-8      	; 0x696 <main+0x28>
 69e:	00 c0       	rjmp	.+0      	; 0x6a0 <main+0x32>
 6a0:	00 00       	nop
	//transmit_string_USART("cc1101_PowerOnReset\r\n");
	_delay_ms(1000);
	PORTE.OUT = 0x00;
 6a2:	14 82       	std	Z+4, r1	; 0x04
	ccxxx0_PowerOnReset();
 6a4:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <ccxxx0_PowerOnReset>
	//transmit_string_USART("cc1101_Setup\r\n");
	ccxxx0_Setup(); //&rfSettings);
 6a8:	0e 94 a5 02 	call	0x54a	; 0x54a <ccxxx0_Setup>
	uint8_t buf[80];
	unsigned char test_data[34];
	memcpy(buf, "IITBOMBAYPRATHAMIITBOMBAYADVITIYXX", 34);
 6ac:	82 e2       	ldi	r24, 0x22	; 34
 6ae:	e4 e5       	ldi	r30, 0x54	; 84
 6b0:	f0 e2       	ldi	r31, 0x20	; 32
 6b2:	de 01       	movw	r26, r28
 6b4:	11 96       	adiw	r26, 0x01	; 1
 6b6:	01 90       	ld	r0, Z+
 6b8:	0d 92       	st	X+, r0
 6ba:	8a 95       	dec	r24
 6bc:	e1 f7       	brne	.-8      	; 0x6b6 <main+0x48>
 6be:	fe 01       	movw	r30, r28
 6c0:	31 96       	adiw	r30, 0x01	; 1
 6c2:	de 01       	movw	r26, r28
 6c4:	af 5a       	subi	r26, 0xAF	; 175
 6c6:	bf 4f       	sbci	r27, 0xFF	; 255
 6c8:	9e 01       	movw	r18, r28
 6ca:	2d 5d       	subi	r18, 0xDD	; 221
 6cc:	3f 4f       	sbci	r19, 0xFF	; 255
	for(int jk = 0; jk < 34; jk++)
		test_data[jk] = buf[jk];
 6ce:	81 91       	ld	r24, Z+
 6d0:	8d 93       	st	X+, r24
	//transmit_string_USART("cc1101_Setup\r\n");
	ccxxx0_Setup(); //&rfSettings);
	uint8_t buf[80];
	unsigned char test_data[34];
	memcpy(buf, "IITBOMBAYPRATHAMIITBOMBAYADVITIYXX", 34);
	for(int jk = 0; jk < 34; jk++)
 6d2:	e2 17       	cp	r30, r18
 6d4:	f3 07       	cpc	r31, r19
 6d6:	d9 f7       	brne	.-10     	; 0x6ce <main+0x60>
		test_data[jk] = buf[jk];

	make_ax25_frame_from_data((uint8_t *)address, (uint8_t *)test_data);
 6d8:	be 01       	movw	r22, r28
 6da:	6f 5a       	subi	r22, 0xAF	; 175
 6dc:	7f 4f       	sbci	r23, 0xFF	; 255
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	90 e2       	ldi	r25, 0x20	; 32
 6e2:	0e 94 4e 01 	call	0x29c	; 0x29c <make_ax25_frame_from_data>
	address[61] = '\0';
 6e6:	10 92 3d 20 	sts	0x203D, r1	; 0x80203d <Data_Length>
		while(1)
		{
			CC_Transmit(61);
 6ea:	8d e3       	ldi	r24, 0x3D	; 61
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <CC_Transmit>
 6f2:	2f ef       	ldi	r18, 0xFF	; 255
 6f4:	84 e3       	ldi	r24, 0x34	; 52
 6f6:	9c e0       	ldi	r25, 0x0C	; 12
 6f8:	21 50       	subi	r18, 0x01	; 1
 6fa:	80 40       	sbci	r24, 0x00	; 0
 6fc:	90 40       	sbci	r25, 0x00	; 0
 6fe:	e1 f7       	brne	.-8      	; 0x6f8 <main+0x8a>
 700:	00 c0       	rjmp	.+0      	; 0x702 <main+0x94>
 702:	00 00       	nop
 704:	f2 cf       	rjmp	.-28     	; 0x6ea <main+0x7c>

00000706 <memcpy>:
 706:	fb 01       	movw	r30, r22
 708:	dc 01       	movw	r26, r24
 70a:	02 c0       	rjmp	.+4      	; 0x710 <memcpy+0xa>
 70c:	01 90       	ld	r0, Z+
 70e:	0d 92       	st	X+, r0
 710:	41 50       	subi	r20, 0x01	; 1
 712:	50 40       	sbci	r21, 0x00	; 0
 714:	d8 f7       	brcc	.-10     	; 0x70c <memcpy+0x6>
 716:	08 95       	ret

00000718 <_exit>:
 718:	f8 94       	cli

0000071a <__stop_program>:
 71a:	ff cf       	rjmp	.-2      	; 0x71a <__stop_program>
